# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthStatusDto {
  message: String!
  ok: Boolean!
}

type AuthTokenDto {
  message: String
  ok: Boolean!
  token: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!

  """Force authentication on all other active sessions"""
  resetOtherSessions: Boolean = false
}

input ChangePasswordRequestInput {
  email: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  authChangePassword(input: ChangePasswordInput!): AuthTokenDto!
  authLogin(input: UserCredentialsInput!): AuthTokenDto!
  authRefreshToken: AuthTokenDto!
  authRegister(input: UserCreateInput!): AuthTokenDto!
  authResetPassword: AuthTokenDto!
  authResetPasswordRequest(input: ChangePasswordRequestInput!): AuthStatusDto!

  """Privileged user update"""
  userUpdate(input: UserUpdateAdvancedInput!): UserDto!

  """Update user's own info"""
  userUpdateSelf(input: UserUpdateInput!): UserDto!
}

"""Ascending or Descending direction for a given `orderBy` argument."""
enum OrderDirection {
  asc
  desc
}

"""User permission"""
enum Permission {
  appALL
  groupALL
  groupCREATE
  groupDELETE
  groupREAD
  groupUPDATE
  userALL
  userCREATE
  userDELETE
  userREAD
  userUPDATE
}

type Query {
  """Get other user info"""
  user(input: UserUpdateAdvancedInput!): UserDto!

  """Get user's own info"""
  userSelf: UserDto!
  users(cursor: String, orderBy: UserOrder, query: String = "", skip: Int, take: Int): [UserDto!]!
}

"""User role"""
enum Role {
  ADMIN
  STAFF
  SUPERUSER
  USER
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input UserCredentialsInput {
  email: String!
  password: String!
}

type UserDto {
  """Object's creation time"""
  createdAt: DateTime!
  email: String
  firstName: String
  groupId: ID
  id: ID!

  """User is active"""
  isActive: Boolean

  """User is verified"""
  isVerified: Boolean
  lastName: String
  permissions: [Permission!]
  role: Role

  """Session version"""
  sessionVersion: Int

  """Object's update time"""
  updatedAt: DateTime!
  username: String
}

type UserDtoEdge {
  cursor: String!
  node: UserDto!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

"""User connection order list."""
enum UserOrderField {
  createdAt
  firstName
  id
  lastName
  updatedAt
  username
}

input UserUpdateAdvancedInput {
  firstName: String
  groupId: ID
  id: ID!

  """User is active"""
  isActive: Boolean

  """User is verified"""
  isVerified: Boolean
  lastName: String
  permissions: [Permission!]!
  role: Role
}

input UserUpdateInput {
  firstName: String
  id: ID!
  lastName: String
}
