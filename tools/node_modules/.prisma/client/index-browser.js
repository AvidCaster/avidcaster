
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.2.1
 * Query Engine version: b71d8cb16c4ddc7e3e9821f42fd09b0f82d7934c
 */
Prisma.prismaVersion = {
  client: "3.2.1",
  engine: "b71d8cb16c4ddc7e3e9821f42fd09b0f82d7934c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.GroupScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  isActive: 'isActive'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  email: 'email',
  username: 'username',
  password: 'password',
  sessionVersion: 'sessionVersion',
  isVerified: 'isVerified',
  isActive: 'isActive',
  firstName: 'firstName',
  lastName: 'lastName',
  language: 'language',
  role: 'role',
  permissions: 'permissions',
  groupId: 'groupId'
});

exports.Prisma.ContactMessageScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  subject: 'subject',
  content: 'content',
  countryCode: 'countryCode',
  ipAddress: 'ipAddress',
  language: 'language'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  USER: 'USER',
  STAFF: 'STAFF',
  ADMIN: 'ADMIN',
  SUPERUSER: 'SUPERUSER'
});

exports.Permission = makeEnum({
  appALL: 'appALL',
  groupCREATE: 'groupCREATE',
  groupREAD: 'groupREAD',
  groupUPDATE: 'groupUPDATE',
  groupDELETE: 'groupDELETE',
  groupALL: 'groupALL',
  userCREATE: 'userCREATE',
  userREAD: 'userREAD',
  userUPDATE: 'userUPDATE',
  userDELETE: 'userDELETE',
  userALL: 'userALL',
  contactMessageCREATE: 'contactMessageCREATE',
  contactMessageREAD: 'contactMessageREAD',
  contactMessageUPDATE: 'contactMessageUPDATE',
  contactMessageDELETE: 'contactMessageDELETE',
  contactMessageALL: 'contactMessageALL'
});

exports.Prisma.ModelName = makeEnum({
  Group: 'Group',
  User: 'User',
  ContactMessage: 'ContactMessage'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
